name: E2E Tests (Playwright)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  # Environment variables for CI
  CI: true
  NODE_ENV: test
  PYTHONUNBUFFERED: 1

jobs:
  e2e-tests:
    name: Run Playwright E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium]  # Can add firefox, webkit later
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Backend Setup
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt
      
      # Frontend Setup
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      # Server Management using E2E Scripts
      # The scripts handle: dependency installation, database setup, and server startup
      # See e2e/scripts/README.md for details
      - name: Make scripts executable
        working-directory: e2e/scripts
        run: chmod +x *.sh
      
      - name: Setup test database
        working-directory: e2e/scripts
        run: |
          cd ../../backend
          ../e2e/scripts/setup-test-database.sh
      
      - name: Start backend server
        working-directory: e2e/scripts
        run: |
          cd ../../backend
          ../e2e/scripts/start-backend.sh
      
      - name: Start frontend server
        working-directory: e2e/scripts
        run: |
          cd ../../frontend
          ../e2e/scripts/start-frontend.sh
      
      # E2E Test Setup
      - name: Install E2E test dependencies
        working-directory: e2e
        run: npm ci
      
      - name: Run E2E code quality checks
        working-directory: e2e
        run: |
          echo "Running E2E code quality checks..."
          
          # Check code formatting with Prettier
          echo "→ Checking code formatting..."
          npm run format:check
          
          # Lint with ESLint
          echo "→ Linting code..."
          npm run lint
          
          # Type check with TypeScript
          echo "→ Type checking..."
          npm run type-check
          
          echo "✅ E2E code quality checks passed!"
      
      - name: Install Playwright system dependencies
        working-directory: e2e
        run: npx playwright install-deps
      
      - name: Install Playwright Browsers
        working-directory: e2e
        run: npx playwright install ${{ matrix.browser }}
      
      # Run E2E Tests
      - name: Run Playwright tests
        working-directory: e2e
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          CI: true
      
      # Artifacts and Cleanup
      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: e2e/playwright-report/
          retention-days: 30
      
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.browser }}
          path: e2e/test-results/
          retention-days: 7
      
      - name: Upload Screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots-${{ matrix.browser }}
          path: e2e/test-results/**/*.png
          retention-days: 7
      
      - name: Upload Videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: videos-${{ matrix.browser }}
          path: e2e/test-results/**/*.webm
          retention-days: 7
      
      - name: Cleanup servers
        if: always()
        working-directory: e2e/scripts
        run: |
          cd ../../backend
          ../e2e/scripts/kill-backend.sh || true
          cd ../frontend
          ../e2e/scripts/kill-frontend.sh || true

  # Summary job that depends on all test jobs
  e2e-test-summary:
    name: E2E Test Summary
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.e2e-tests.result }}" == "success" ]]; then
            echo "✅ All E2E tests passed!"
            exit 0
          else
            echo "❌ E2E tests failed!"
            exit 1
          fi
