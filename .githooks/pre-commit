#!/bin/bash

# Git pre-commit hook to run linting, type checking, and tests
# This hook runs before each commit to ensure code quality

echo "Running pre-commit checks..."
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# Run backend checks
echo "🐍 Running backend checks..."
cd backend

# Check if ruff is installed
if ! command -v ruff &> /dev/null; then
    echo "⚠️  Ruff not installed. Run 'pip install -r requirements-dev.txt'"
    echo "Skipping linting checks..."
else
    # Run Ruff linting
    echo "  → Checking code with Ruff..."
    ruff check .
    RUFF_EXIT_CODE=$?
    
    if [ $RUFF_EXIT_CODE -ne 0 ]; then
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "❌ Ruff linting failed! Commit aborted."
        echo "Run 'make format' or 'ruff check --fix .' to fix issues."
        cd ..
        exit 1
    fi
    echo "  ✓ Ruff checks passed"
fi

# Check if mypy is installed
if ! command -v mypy &> /dev/null; then
    echo "⚠️  mypy not installed. Run 'pip install -r requirements-dev.txt'"
    echo "Skipping type checking..."
else
    # Run mypy type checking
    echo "  → Type checking with mypy..."
    mypy app/
    MYPY_EXIT_CODE=$?
    
    if [ $MYPY_EXIT_CODE -ne 0 ]; then
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "❌ mypy type checking failed! Commit aborted."
        echo "Fix type errors or add type ignores where appropriate."
        cd ..
        exit 1
    fi
    echo "  ✓ Type checking passed"
fi

# Run unit tests with pytest
echo "  → Running unit tests..."
pytest unit_tests/ -q --tb=short -x

# Capture the exit code
BACKEND_EXIT_CODE=$?

# Return to the root directory
cd ..

# If backend tests failed, prevent the commit
if [ $BACKEND_EXIT_CODE -ne 0 ]; then
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "❌ Backend tests failed! Commit aborted."
    echo "Fix the failing tests before committing."
    exit 1
fi

echo "✅ Backend tests passed!"
echo ""

# Run frontend checks
echo "⚛️  Running frontend checks..."
cd frontend

# Check if node_modules exists (frontend dependencies installed)
if [ ! -d "node_modules" ]; then
    echo "⚠️  Frontend dependencies not installed. Skipping frontend checks."
    echo "Run 'cd frontend && npm install' to enable frontend testing."
else
    # Run Prettier format check
    echo "  → Checking code formatting with Prettier..."
    npm run format:check --silent
    PRETTIER_EXIT_CODE=$?
    
    if [ $PRETTIER_EXIT_CODE -ne 0 ]; then
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "❌ Code formatting check failed! Commit aborted."
        echo "Run 'cd frontend && npm run format' to fix formatting issues."
        cd ..
        exit 1
    fi
    echo "  ✓ Code formatting passed"

    # Run ESLint
    echo "  → Linting with ESLint..."
    npm run lint --silent
    ESLINT_EXIT_CODE=$?
    
    if [ $ESLINT_EXIT_CODE -ne 0 ]; then
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "❌ ESLint check failed! Commit aborted."
        echo "Run 'cd frontend && npm run lint:fix' to fix linting issues."
        cd ..
        exit 1
    fi
    echo "  ✓ ESLint passed"

    # Run Jest with coverage
    echo "  → Running unit tests..."
    npm run test:coverage --silent

    # Capture the exit code
    FRONTEND_EXIT_CODE=$?

    # Return to the root directory
    cd ..

    # If frontend tests failed, prevent the commit
    if [ $FRONTEND_EXIT_CODE -ne 0 ]; then
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "❌ Frontend tests failed! Commit aborted."
        echo "Fix the failing tests or coverage thresholds before committing."
        exit 1
    fi

    echo "✅ Frontend checks passed!"
fi

echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "✅ All tests passed!"
exit 0
